{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "626efb46-9594-44bb-b2cf-4c875e89418f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "90910622-88de-4726-aaa3-e342bb535d5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(r'C:/Users/mohdm/Downloads/archive (11)/zomato.csv',encoding='latin-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7ab0c9e1-40df-4a83-a174-778d84cf2696",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Cuisines'] = df['Cuisines'].fillna('Unknown')\n",
    "df['Price range'] = df['Price range'].fillna(df['Price range'].mean())\n",
    "df['Aggregate rating'] = df['Aggregate rating'].fillna(df['Aggregate rating'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bea2b903-7ab5-46f2-a1b3-84e56b0344e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Combined Features'] = df['Cuisines'] + ' ' + df['Price range'].astype(str) + ' ' + df['Aggregate rating'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dc7ed3b5-b782-456c-9e99-5837c0219c0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "count_vectorizer = CountVectorizer()\n",
    "count_matrix = count_vectorizer.fit_transform(df['Combined Features'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "be99fe90-eb6d-4837-a72d-2a3c20950b2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "cosine_sim = cosine_similarity(count_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cfed8146-cc4a-4dc1-b029-af4d48124b03",
   "metadata": {},
   "outputs": [],
   "source": [
    "def recommend_restaurants(restaurant_name, df, cosine_sim):\n",
    "    try:\n",
    "        # Get the index of the restaurant that matches the name\n",
    "        idx = df[df['Restaurant Name'] == restaurant_name].index[0]\n",
    "    except IndexError:\n",
    "        return \"Restaurant not found in the dataset.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "aa42bf9b-c9d4-47c3-a1cc-a4a3327186d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "idx = 0 \n",
    "sim_scores = list(enumerate(cosine_sim[idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b79fd60c-7105-47ea-95c9-305816bc276e",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "35b3a8b9-7ad8-49c2-9497-267895e1eea6",
   "metadata": {},
   "outputs": [],
   "source": [
    "sim_scores = sim_scores[1:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4f8b9b77-697f-41b6-9035-9c8e875635f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "restaurant_indices = [i[0] for i in sim_scores]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9e8a0279-c1e1-42d6-a267-9a5fa3af0ce1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Restaurant Name</th>\n",
       "      <th>Cuisines</th>\n",
       "      <th>Price range</th>\n",
       "      <th>Aggregate rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Izakaya Kikufuji</td>\n",
       "      <td>Japanese</td>\n",
       "      <td>3</td>\n",
       "      <td>4.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sushi Loko</td>\n",
       "      <td>Japanese</td>\n",
       "      <td>3</td>\n",
       "      <td>3.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>New Koto</td>\n",
       "      <td>Japanese</td>\n",
       "      <td>4</td>\n",
       "      <td>3.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>Sushi Leblon</td>\n",
       "      <td>Japanese</td>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Restaurant Name  Cuisines  Price range  Aggregate rating\n",
       "1   Izakaya Kikufuji  Japanese            3               4.5\n",
       "27        Sushi Loko  Japanese            3               3.1\n",
       "29          New Koto  Japanese            4               3.7\n",
       "54      Sushi Leblon  Japanese            4               4.6"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " df[['Restaurant Name', 'Cuisines', 'Price range', 'Aggregate rating']].iloc[restaurant_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc57aa61-af7f-44e5-a1da-9c22f0ca27c0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
